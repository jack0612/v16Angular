* {
    margin: 0px;
    padding: 0px;
    box-sizing: border-box;

    // Changing the body here

    body {
        width: 100%;
        min-height: 100vh;
        font-family: sans-serif;
        font-size: 45px;
    }
}

$gap : 4vh;
$padding : 4vh;
$color : #48CAE4;

$bp : (mobile : 480px,
    tablet : 768px,
    desktop : 1440px,
);

@mixin query($display) {

    @each $key,
    $value in $bp {

        //  defining max-width
        @if ($display ==$key) {
            @media (max-width: $value) {
                @content;
            }
        }
    }
}


.container {
    display: flex;

    //to lay .block-* classes in a column
    flex-direction: column;

    //Setting gap between the .block-* classes
    gap: $gap;

    // to set some padding & border inside
    padding: $padding;
    border: 1vh solid $color;
}

[class ^="block-"] {

    //To lay the boxes in a row.
    display: flex;
    flex-direction: row;

    //Removing border(1vh+1vh), gap, & padding from the height
    // And then equally distributing spaces between the 
    // .block-* classes by dividing it by 3

    height: (100vh-2vh -$gap*2-$padding*2) / 3;

    // putting gap between .box-* classes
    gap: $gap;

    // Style rules for mobile display

    @include query (mobile) {
        flex-direction: column;

        // you can pick any value you wish.
        height: 500px;
    }

}

[class ^="box-"] {

    // To set the text at center of every box
    display: flex;
    justify-content: center;
    align-items: center;

    // To divide spaces among the boxes
    // try flex-gap:1; you can see the difference.
    // flex-grow: 1; // 1+1+1 =3 => 1/3 X 100% => 33.33% each

    flex-basis: (100%)/3; // 33.33% each
    border: 2px solid black;
    border-radius: 10px;
    background-color: #c1c1c1;
}